SierpinskiTriangle = function(
# SierpinskiTriangle v1.0
#
# This function draws Sierpinski Triangles according to user parameters.
# Can be run with no customization.
# Code is done in base R and base plotting tools to minimize reliance on packages.
#
# Parameter List
## points (Int.) = Number of points to use when drawing the triangle.
##                 Defaults to 10,000
## baselength (Numeric) = Length of one side of the equilateral triangle.
##                        Triangles always start at (0,0).
##                        Top point of triangle is defined as:
##                        (baselength/2, (sqrt(3)/2)*baselength
## basecolor (String, Color Name) = Color for first three points defining the triangle.
##                                  Can only be 1 color. Defaults to black.
## basepointsize (Int.) = Size of points for the first three points.
##                        Interfaces with the cex parameter. Defaults to 1.
## basepointtype (Int. or String) = Shape of points for the first three points.
##                                  Interfaces with the cex parameter. Defaults to "."
## tricolors (Vect., Color Names) = Colors to be used when building the internals of the triangle.
##                                  Colors can be names or hex values.
## trifidelity (Int.) = The number of points between 0 and the baselength.
##                      Interacts with the "by" parameter in an seq command.
##                      Defaults to .001.
## border (Int.) = Amount of white space around the plotting area.
##                 Equal on all sides. Defaults to .5.
## pointsize (Int.) = Size of points to be plotted. Interfaces with the cex parameter.
##                    Defaults to 1.
## pointtype (Int. or String) = Shape of point to be plotted.
##                              Interfaces with the pch parameter. Defaults to "."
## report (Int.) = How often to report on successful iterations.
##                 Defaults to 1000.
## bgcolor (String, Color Name) = Color for the background of the plot.
##                                Defaults to white.
## transparency (Numeric) = Amount of transparency to have on a 0 to 1 scale where
##                          0 is transparency and 1 is normal. Defaults to 1.
#
points = 10000, baselength = 1, tricolors = c("black"), border = .5, basecolor = 'black',
basepointsize = 1, basepointtype = ".", trifidelity = .001, pointsize = 1, pointtype = ".",
report=1000, bgcolor="white", transparency = 1
){
# Error Trapping and Helper Functions
areColors <- function(x) {
  sapply(x, function(X) {
   tryCatch(is.matrix(col2rgb(X)), 
     error = function(e) FALSE)})}
  
if(is.numeric(points) == FALSE || length(points) != 1){
 stop("points must be numeric and of length 1.")}
if(is.numeric(baselength) == FALSE || length(baselength) != 1 || baselength <= 0){
 stop("baselength must be numeric, of length 1, and greater than 0.")}
if(is.numeric(border) == FALSE || length(border) != 1 || border <= 0){
 stop("border must be numeric, of length 1, and greater than 0.")}
if(is.numeric(basepointsize) == FALSE || length(basepointsize) != 1 || basepointsize <= 0){
 stop("basepointsize must be numeric, of length 1, and greater than 0.")}
if(is.numeric(pointsize) == FALSE || length(pointsize) != 1 || pointsize <= 0){
 stop("pointsize must be numeric, of length 1, and greater than 0.")}
if(length(which(areColors(tricolors) == "FALSE")) > 0){
 stop("At least 1 color name is invalid. Please correct.")}
if(length(which(areColors(basecolor) == "FALSE")) > 0){
 stop("basecolor is an invalid color. Please correct.")}
if(length(which(areColors(bgcolor) == "FALSE")) > 0){
 stop("bgcolor is an invalid color. Please correct.")}

# Base Triangle Construction
triagstartx = c(0, .5*baselength, baselength)
triagstarty = c(0, (sqrt(3)/2)*baselength, 0)

# Initial Points
xvect = .5*baselength
yvect = (sqrt(3)/2)*baselength

# Further Points
for( i in 1:points){
if(i %% report == 0){print(paste(i, " points calculated and plotted.", sep=""))}
n = sample(1:3, 1)
xvect = c(xvect, .5*(xvect[i] + triagstartx[n]))
yvect = c(yvect, .5*(yvect[i] + triagstarty[n]))
}

# Plot Construction
tricolors = adjustcolor(tricolors, alpha.f=transparency)
par(ann=FALSE, mar=rep(border, 4), oma=c(0, 0, 0, 0), bg=bgcolor)
plot(triagstartx, triagstarty, axes = FALSE, 
     col=basecolor, pch=basepointtype, cex=basepointsize)
points(xvect, yvect, pch=pointtype, cex=pointsize, col=tricolors)
}
